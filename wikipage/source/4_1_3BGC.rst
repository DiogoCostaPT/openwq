Biogeochemistry
==================================

The biogeochemical cycling file is a JSON file that defines both the chemical species to include in the model configuration and the transformations that define each cycling framework. 

**Principal Key 1**: ``MODULE_NAME``

+--------------------+-------------------------------------------------------+
| ``MODULE_NAME``    | Select the module name desired                        |
+--------------------+-------------------------------------------------------+

**Principal Key 2**: ``CHEMICAL_SPECIES``

+-----------------------------------+-------------------------------------------------------+
| ``LIST`` -> ``(i#)``              | Numbered list of chemical species                     |
|                                   | Example: ``"1":"NO3"``                                |
+-----------------------------------+-------------------------------------------------------+
| ``BGC_GENERAL_MOBILE_SPECIES``    | List of numbers of mobile species                     |
+-----------------------------------+-------------------------------------------------------+

**Principal Key 3**: ``CYCLING_FRAMEWORK``

+---------------------------------------------------------------+---------------------------------------------------------+
| ``<BGQ_cycle_name>``                                          | Define cycling framework names                          |
+---------------------------------------------------------------+---------------------------------------------------------+
| ``<BGQ_cycle_name>`` -> ``LIST_TRANSFORMATIONS`` -> ``(i#)``  | List transformation names for each cycling framework    |
|                                                               | Content: ``"index"``: ``"transformation_name"``         |
|                                                               | Format: ``(i#): (s#)``                                  |
|                                                               | Example: ``"1": "mineralization"``                      |
+---------------------------------------------------------------+---------------------------------------------------------+
| ``(i#)`` -> ``CONSUMED``                                      | Species consumed. e.g, ``"NH4"``                        |
+---------------------------------------------------------------+---------------------------------------------------------+
| ``(i#)`` -> ``PRODUCED``                                      | Species produced, e.g., ``"NO3"``                       |
+---------------------------------------------------------------+---------------------------------------------------------+
| ``(i#)`` -> ``KINETICS``                                      | Kinetics equation and time units                        |
|                                                               | Content: [``equation``, ``units``]                      |
|                                                               | Format: ``[(s#), (s#)]``                                |
|                                                               | Example: ``["NO3 * k", "1/day"]``                       |
+---------------------------------------------------------------+---------------------------------------------------------+
| ``(i#)`` -> ``PARAMETER_NAMES``                               | List of parameter names in transformation equation      |
| ``(i#)`` -> ``PARAMETER_VALUES``                              | Define parameter values for equation                    |
|                                                               | Content: ``parameter_name``: ``value``                  |
|                                                               | Format: ``(s#): (f#)``                                  |
|                                                               | Example: ``"k": 0.001``                                 |
+---------------------------------------------------------------+---------------------------------------------------------+


The JSON file supports C/C++ syntax for comments: single-line comment (``//``) or comment blocks (``/*`` and ``*/``). 

The symbol ``(i#)`` refers to a integer number sequence.. The symbol ``(s#)`` refers to a string input. The symbol ``<f#>`` refers to a float input value.

The Kinetics Equation is supported by the C++ Mathematical Expression Toolkit Library
`C++ Mathematical Expression Toolkit Library <http://www.partow.net/programming/exprtk/index.html>`_. The equations can be written with (1) multiple chemical species, (2) user-defined parameters (``PARAMETER_NAMES`` and ``PARAMETER_VALUES``), and (3) in-build hytdrological model dependencies (``Tair`` and ``Tsoil``).
These model dependencies are tailored to each hydrological model. They can be soil moisture, air and/or soil temperature, etc.



Example:

.. code-block:: json

    {
        "CHEMICAL_SPECIES": {
            "LIST": {
                "1": "NO3",
                "2": "NH4",
                "3": "SRP",
                "4": "partP",
            },
            "MOBILE_SPECIES": [1,2,4,7,8,9]
        },
        "CYCLING_FRAMEWORKS": {
            "N_inorg": {
                "LIST_TRANSFORMATIONS":{
                    "1": "nitrification",
                    "2": "denitrification"
                },
                "1":{
                    "CONSUMED": "NH4",
                    "PRODUCED": "NO3",
                    "KINETICS": ["NH4 * k", "1/day"],
                    "PARAMETER_NAMES": ["k"],
                    "PARAMETER_VALUES":{
                        "k": 0.01
                    }
                },
                "2":{
                    "CONSUMED": "NO3",
                    "PRODUCED": "N2",
                    "KINETICS": ["NO3 * k / (p^2)", "1/day"],
                    "PARAMETER_NAMES": ["k","p"],
                    "PARAMETER_VALUES":{
                        "k": 0.01,
                        "p": 10
                    }
                }
            },
            "P_inorg": {
                "LIST_TRANSFORMATIONS":{
                    "1": "dynamic_equilibrium"
                },
                "1":{
                    "CONSUMED": "SRP",
                    "PRODUCED": "partP",
                    "KINETICS": ["SRP * k * Tsoil", "1/day"],
                    "PARAMETER_NAMES": ["k"],
                    "PARAMETER_VALUES":{
                        "k": 0.01
                    }
                }
            }
        }
    }